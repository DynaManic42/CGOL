import numpy as np
import pygame as pg

size = int(input("How big do you want your matrix to be?: "))

Board = np.zeros([size, size], "int")   #Need to implement scaling for different window sizes
CBoard = Board.copy()

def adj(x, y, board):
    total = 0
    x_lim = len(Board)
    y_lim = len(Board[0])
    if x > 1 and x < x_lim:
        rows = board[x-2:x+1]
    elif x == 1:
        rows = board[:2]
    elif x == x_lim:
        rows = board[x_lim - 2:]
    for row in rows:
        if y > 1 and y < y_lim:
            low_row = row[y-2:y+1]
        elif y == 1:
            low_row = row[:2]
        elif y == y_lim:
            low_row = row[y_lim - 2:]
        for cell in low_row:
            total += cell
    total -= board[x-1,y-1]
    return total

pg.init()
clock = pg.time.Clock()
window_size = 900
cell_size = (window_size / size)
window = pg.display.set_mode((window_size, window_size), pg.RESIZABLE)
running = True
static = True
playing = False
Toggle = False
modes = ["normal", "step"]
game_mode = "normal"
step = True
is_dead = False
initial_state = 0
cycle = 0

while running:
    
    
    if game_mode == "step":
        step = False
    else:
        step = True
    
    for event in pg.event.get():
        if event.type == pg.QUIT:
            print(f"Quitting game, lasted {cycle} generations(s)")
            playing = False
            static = False
            running = False
        
        elif event.type == pg.VIDEORESIZE:
            pg.display._resize_event(event)
            window = pg.display.set_mode((event.w, event.h), pg.RESIZABLE)
            window_size = min(event.w, event.h)
            cell_size = (window_size / size)
            
        elif event.type == pg.KEYDOWN:
            if event.key == pg.K_RETURN:
                if game_mode != "normal":
                    static = False
                    running = True
                    game_mode = "normal"
                else:
                    static = not static
                    playing = not playing
            elif event.key == pg.K_k:
                game_mode = "step"
                step = True
                static = True
                playing = True
                

    if static:
        clock.tick(100)
        
        if pg.mouse.get_pressed()[0]:
            row = int(event.pos[1] // cell_size)
            col = int(event.pos[0] // cell_size)
            row = np.clip(row, 0, size)
            col = np.clip(col, 0, size)
            try:
                Board[row][col]
            except:
                break
            else:
                if not Toggle:
                    initial_state = Board[row][col]
                    Toggle = True
                if Board[row][col] == 1 and initial_state == 1:
                    Board[row][col] = 0
                elif Board[row][col] == 0 and initial_state == 0:
                    Board[row][col] = 1
                    
        elif event.type == pg.MOUSEBUTTONUP:
            Toggle = False

    if playing and step:  
            
        is_dead = True
        #Find next pattern
        for x in range(1, len(Board) + 1):
            for y in range(1, len(Board[0]) + 1):
                if Board[x-1, y-1] == 1:
                    is_dead = False
                if adj(x, y, Board) <= 1 or adj(x, y, Board) >= 4:
                    CBoard[x-1][y-1] = 0
                elif adj(x, y, Board) == 2:
                    CBoard[x-1][y-1] = Board[x-1][y-1]
                elif adj(x, y, Board) == 3:
                    CBoard[x-1][y-1] = 1
        
        if is_dead and cycle > 0:
            print(f"All life ended, lasted {cycle} generation(s)")
            running = False
        elif (CBoard == Board).all() == True and cycle > 0:
            choice = str(input(f"All life stable, {cycle} generations(s) before stable. Do you wish to restart, continue, or quit (r/c/q)?: "))
            if choice == "r":
                np.copyto(Board, np.zeros([size, size], "int")) #change this
                cycle = -1
                static = True
                playing = False
            elif choice == "c":
                pass
            elif choice == "q":
                running = False
        else:
            np.copyto(Board, CBoard)
        
        cycle += 1
        clock.tick(8)
    
    window.fill(0)
    for iy, rowOfCells in enumerate(Board):
        for ix, cell in enumerate(rowOfCells):
            color = (64, 64, 64) if cell ==  1 else (164, 164, 164)
            pg.draw.rect(window, color, (ix*cell_size+cell_size//9, iy*cell_size+cell_size//9, cell_size - cell_size//9, cell_size - cell_size//9))
    pg.display.flip()
        

pg.quit()
#ToDo: Enable zoom-in/ zoom-out, CLEAN UP CODE into functions
